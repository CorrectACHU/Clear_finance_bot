import telebot
import pymongo
import json
import os

from dotenv import load_dotenv
from telebot import types

from services.services import get_user, get_expense, back_button, main_menu, back_markup, go_back
from services.categories import *

# ENV
load_dotenv()

# BOT init
bot = telebot.TeleBot(os.getenv('BOT_ID'))
###############################################################
# DB's settings
mongo_username = os.getenv('MONGO_USERNAME')
mongo_pass = os.getenv('MONGO_PASS')
db_client = pymongo.MongoClient(f'mongodb://{mongo_username}:{mongo_pass}@mongo:27017/')
current_db = db_client['tbot_database']

# Create categories
categories_db = current_db['categories']
basic_ctgrs = json.loads(os.getenv('CATEGORIES'))

if not [i for i in categories_db.find()]:
    ins_result = categories_db.insert_many(basic_ctgrs)
    print(ins_result.inserted_ids)

# Create users
users_db = current_db['users']

# Create expenses
expenses_db = current_db['expenses']

###############################################################

current_category = {}


# LOGIC
@bot.message_handler(commands=['start'])
def start(message):
    def step1(message):
        if message.text == '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è':
            bot.send_message(
                message.chat.id,
                '–≠—Ç–æ—Ç –±–æ—Ç –º–æ–∂–µ—Ç –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —Ç–≤–æ–∏ —Ä–∞—Å—Ö–æ–¥—ã!\n'
                '–ß—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–π —Ä–∞—Å—Ö–æ–¥ -\n'
                '–Ω–∞–ø–∏—à–∏ –µ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ - \n<b>{<u>—Å—É–º–º–∞ –±–µ–∑ –∑–Ω–∞–∫–æ–≤</u>}{<u>–∫–∞—Ç–µ–≥–æ—Ä–∏—è —Ç—Ä–∞—Ç</u>}</b>\n'
                '–ù–∞–ø—Ä–∏–º–µ—Ä:<b>"2 —Ç–∞–∫—Å–∏"</b>\n'
                '–î–æ–±–∞–≤–∏—Ç—å, —É–¥–∞–ª–∏—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç—ã –º–æ–∂–µ—à—å —Å –ø–æ–º–æ—â—å—é —Ä–∞–∑–¥–µ–ª–∞ "–ú–æ–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"\n',
                parse_mode='html'
            )
            bot.delete_message(message.chat.id, message.message_id)
            bot.register_next_step_handler(message, step1)
        elif message.text == '–ú–æ–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏':
            markup = categories_markup(message, categories_db)
            bot.send_message(message.chat.id, '–í–∞—à–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', reply_markup=markup)
            bot.delete_message(message.chat.id, message.message_id)
            bot.register_next_step_handler(message, category1)
        elif message.text == '–ú–æ–∏ —Ç—Ä–∞—Ç—ã':
            bot.send_message(message.chat.id, '–≠—Ç–æ –∑–∞–≥–ª—É—à–∫–∞')

    def category1(message):
        global current_category
        categories = get_categories(message, categories_db)
        if message.text == '–ù–∞–∑–∞–¥ üîô':
            go_back(message, "–í—ã–±–µ—Ä–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –µ—â–µ :)", markup=main_menu(), bot=bot, next_func=step1)
        # elif message.text == '–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é':
        #     markup = categories_markup(message,categories_db)
        #     bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –µ—â–µ :)", reply_markup=markup)
        #     bot.delete_message(message.chat.id, message.message_id)
        #     bot.register_next_step_handler(message, step1)
        elif message.text == '–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é':
            markup = back_markup()
            bot.send_message(message.chat.id, '–ö–∞–∫ –±—É–¥–µ—Ç –Ω–∞–∑—ã–≤–∞—Ç—å—Å—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è?', reply_markup=markup)
            bot.register_next_step_handler(message, add_category1)

        for category in categories:
            if message.text == f'{category["title"]}' and category['allow'] == message.from_user.id:
                current_category = category
                markup = category_markup()
                bot.send_message(
                    message.chat.id,
                    f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category["title"].upper()}, –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ',
                    reply_markup=markup
                )
                bot.delete_message(message.chat.id, message.message_id)
                bot.register_next_step_handler(message, category2)
            elif message.text == f'{category["title"]}':
                markup = back_markup()
                current_category = category
                bot.send_message(
                    message.chat.id,
                    f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category["title"].upper()}',
                    reply_markup=markup
                )
                bot.delete_message(message.chat.id, message.message_id)
                bot.register_next_step_handler(message, category2)

    def category2(message):
        if message.text == '–ù–∞–∑–∞–¥ üîô':
            markup = categories_markup(message, categories_db)
            go_back(message, "–¢–≤–æ–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", bot, markup, category1)
        elif message.text == '–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é':
            markup = main_menu()
            category = current_category
            categories_db.delete_one({'_id': category['_id']})
            bot.send_message(message.chat.id, f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è {category["title"]} –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞', reply_markup=markup)
            bot.register_next_step_handler(message, step1)
        elif message.text == '–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏':
            markup = back_markup()
            bot.send_message(message.chat.id, '–ù–æ–≤–æ–µ –∏–º—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', reply_markup=markup)
            bot.register_next_step_handler(message, update_category)

    def add_category1(message):
        if message.text == "–ù–∞–∑–∞–¥ üîô":
            markup = categories_markup(message, categories_db)
            go_back(message, "–¢–≤–æ–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", bot, markup, category1)
        else:
            markup = main_menu()
            new_category = {'title': message.text.lower(), 'allow': message.from_user.id}
            insert_id = categories_db.insert_one({'title': message.text.lower(), 'allow': message.from_user.id})
            go_back(message, f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è "{message.text.upper()}" —Å–æ–∑–¥–∞–Ω–∞!', bot, markup, step1)

    def update_category(message):
        category = current_category
        old_title = category['title']
        if message.text == "–ù–∞–∑–∞–¥ üîô":
            markup = category_markup()
            go_back(message, "–¢–≤–æ–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", bot, markup, category2)
        else:
            markup = main_menu()
            update_id = categories_db.update_one({'_id': category['_id']}, {"$set": {'title': message.text.lower()}})
            go_back(message, f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è "{old_title}" –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ "{message.text.upper()}"!', bot, markup, step1)

    markup = main_menu()

    bot.send_message(message.chat.id, f'Hello, <b>{message.from_user.first_name} </b>', parse_mode='html')
    user = get_user(message)
    if not [i for i in users_db.find({'id': user['id']})]:
        ins_result = users_db.insert_one(user)
        printed_mess = f'–ù—É –≤—Å–µ! —Ç–µ–ø–µ—Ä—å —Ç—ã –≤ –±–∞–∑–µ!'
        bot.send_message(message.chat.id, printed_mess, parse_mode='html')
    bot.send_message(message.chat.id, "–¢—ã –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —á—Ç–æ –º–æ–∂–µ—Ç –±–æ—Ç –≤ —Ä–∞–∑–¥–µ–ª–µ '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'", parse_mode='html',
                     reply_markup=markup)
    bot.register_next_step_handler(message, step1)


# LIST OF CATEGORIES VIEW


# SHOW TAGS
# @bot.message_handler(commands=['tags'])
# def show_category_tags(message):
#     markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
#
#
#     def step1(message):
#         for i in categories:
#             markup = types.ReplyKeyboardRemove()
#             if message.text == "–æ—Ç–º–µ–Ω–∞ üö´":
#                 bot.delete_message(message.chat.id, message.message_id)
#                 bot.delete_message(message.chat.id, message.message_id - 1)
#                 bot.send_message(message.chat.id, "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=markup)
#             elif message.text == f"{i['title']}":
#                 bot.delete_message(message.chat.id, message.message_id)
#                 bot.delete_message(message.chat.id, message.message_id - 1)
#                 bot.send_message(
#                     message.chat.id,
#                     f"–°–ª–µ–¥—É—é—â–∏–µ —Ç–µ–≥–∏ –æ—Ç–Ω–æ—Å—è—Ç—å—Å—è –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ <b>{i['title']}</b> :\n{', '.join(i['tags'])}",
#                     parse_mode='html', reply_markup=markup
#                 )
#
#     bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é ", reply_markup=markup)
#     bot.register_next_step_handler(message, step1)
#
#
# # ADD CATEGORY
# @bot.message_handler(commands=['add_category'])
# def add_category(message):
#     global category
#     category = {'title': '', 'tags': '', 'allow': f'{message.from_user.id}'}
#     markup = types.InlineKeyboardMarkup()
#
#     def step1(message):
#         nonlocal markup
#         category['title'] = message.text.lower().strip()
#         try:
#             bot.send_message(
#                 message.chat.id,
#                 f"–ò–º—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {message.text}"
#             )
#             bot.send_message(
#                 message.chat.id,
#                 "–ù–∞–ø–∏—à–∏ —Ç–µ–≥ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –ø–æ –∫–æ—Ç–æ—Ä—ã–º —Ç—ã —Å–º–æ–∂–µ—à—å –¥–æ–±–∞–≤–ª—è—Ç—å –≤ —Å–≤–æ—é –∫–æ—Ç–µ–≥–æ—Ä–∏—é –Ω–æ–≤—ã–µ —Ç—Ä–∞—Ç—ã",
#                 reply_markup=markup,
#             )
#             bot.register_next_step_handler(message, step2)
#         except:
#             bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
#
#     def step2(message):
#         category['tags'] = message.text.split(",") + [category['title']]
#         markup = types.InlineKeyboardMarkup()
#         item1 = types.InlineKeyboardButton('–î–∞', callback_data='yes')
#         item2 = types.InlineKeyboardButton('–ù–µ—Ç', callback_data='no')
#         markup.add(item1, item2)
#         try:
#             bot.send_message(
#                 message.chat.id,
#                 f"–¢–µ–≥–∏, –ø–æ –∫–æ—Ç–æ—Ä—ã–º —Ç—ã —Å–º–æ–∂–µ—à—å –¥–æ–±–∞–≤–ª—è—Ç—å —Ä–∞—Å—Ö–æ–¥—ã :\n{', '.join(category['tags'])}"
#             )
#             bot.send_message(
#                 message.chat.id,
#                 f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category['title']},\n—Ç–µ–≥–∏ - {','.join(category['tags'])},\n<b>C–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é?</b>",
#                 reply_markup=markup,
#                 parse_mode='html'
#             )
#         except:
#             bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏ —Ç–µ–≥–∏ –ø—Ä–∏–º–µ—Ä =>\n –∫–æ—Ñ–µ, –∫—Ä—É–∞—Å–∞–Ω, –±—É—Ç–µ—Ä–±—Ä–æ–¥')
#             bot.register_next_step_handler(message, step2)
#
#     bot.send_message(
#         message.chat.id,
#         '–°–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∑–∞—Ç–µ–º —Ç–µ–≥–∏ –ø–æ –∫–æ—Ç–æ—Ä—ã–º –±–æ—Ç –±—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å –≤ –∫–∞–∫—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–æ–±–∞–≤–ª—è—Ç—å –∑–∞–ø–∏—Å—å'
#     )
#     bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
#     bot.register_next_step_handler(message, step1)
#
#
# # ADD EXPENSE
# @bot.message_handler(commands=['add_expense'])
# def add_expense(message):
#     def step1(message):
#         expense = get_expense(message)
#         try:
#             mess = str(expense["amount"]) + ' ' + expense["category"] + ' –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–∞–∑—É'
#             bot.send_message(message.chat.id, mess)
#         except:
#             mess = expense['exception']
#             bot.send_message(message.chat.id, mess)
#             bot.register_next_step_handler(message, step1)
#
#     bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ —Ä–∞—Å—Ö–æ–¥")
#     bot.register_next_step_handler(message, step1)
#
#
# # INFO ABOUT PROJECT
# @bot.message_handler(commands=['help'])
# def list_of_commands(message):
#
#
#
# @bot.callback_query_handler(func=lambda call: True)
# def callback(call):
#     global category
#     if call.message:
#         if call.data == 'yes':
#             bot.edit_message_text(
#                 chat_id=call.message.chat.id,
#                 message_id=call.message.id,
#                 text=f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è <b>{category['title']}</b> —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!",
#                 parse_mode='html'
#             )
#             categories_db.insert_one(category)
#         elif call.data == 'no':
#             bot.edit_message_text(
#                 chat_id=call.message.chat.id,
#                 message_id=call.message.id,
#                 text=f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è <b>{category['title']}</b> –Ω–µ <u>—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!</u>",
#                 parse_mode='html'
#             )


bot.polling(none_stop=True)
