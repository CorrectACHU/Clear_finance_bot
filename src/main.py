import telebot
import pymongo
import json
import os
import bson

from dotenv import load_dotenv

from services.services import get_user, markup_main_menu, markup_back, send_and_go_next, wrong_message
from services.categories import *
from services.expenses import *

# ENV
load_dotenv()

# BOT init
bot = telebot.TeleBot(os.getenv('BOT_ID'))
###############################################################
# DB's settings
mongo_username = os.getenv('MONGO_USERNAME')
mongo_pass = os.getenv('MONGO_PASS')
db_client = pymongo.MongoClient(f'mongodb://{mongo_username}:{mongo_pass}@mongo:27017/')
current_db = db_client['tbot_database']

# Create categories collection
categories_db = current_db['categories']
basic_categories = json.loads(os.getenv('CATEGORIES'))

if not [i for i in categories_db.find()]:
    ins_result = categories_db.insert_many(basic_categories)
    print(ins_result.inserted_ids)

# Create users collection
users_db = current_db['users']

# Create expenses collection
expenses_db = current_db['expenses']


###############################################################


# LOGIC
@bot.message_handler(commands=['start'])
def start(message):
    current_category = {}
    expense = {}
    expenses = []

    # CATCH COMMANDS FROM MAIN MENU
    def step1(message):
        if message.text == '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è':
            send_and_go_next(bot, message, markup_main_menu(),
                             '–≠—Ç–æ—Ç –±–æ—Ç –º–æ–∂–µ—Ç –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —Ç–≤–æ–∏ —Ä–∞—Å—Ö–æ–¥—ã!\n'
                             '–ß—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–π —Ä–∞—Å—Ö–æ–¥ -\n'
                             '–Ω–∞–ø–∏—à–∏ –µ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ - \n<b>{<u>—Å—É–º–º–∞ –±–µ–∑ –∑–Ω–∞–∫–æ–≤</u>}{<u>–∫–∞—Ç–µ–≥–æ—Ä–∏—è —Ç—Ä–∞—Ç</u>}</b>\n'
                             '–ù–∞–ø—Ä–∏–º–µ—Ä:<b>"2 —Ç–∞–∫—Å–∏"</b>\n'
                             '–î–æ–±–∞–≤–∏—Ç—å, —É–¥–∞–ª–∏—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç—ã –º–æ–∂–µ—à—å —Å –ø–æ–º–æ—â—å—é —Ä–∞–∑–¥–µ–ª–∞ "–ú–æ–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"\n',
                             step1)
        elif message.text == '–ú–æ–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏':
            send_and_go_next(bot, message, categories_markup(message, categories_db, add_button=True),
                             '–¢–≤–æ–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', category1)
        elif message.text == '–†–∞—Å—Ö–æ–¥—ã':
            send_and_go_next(bot, message, expenses_markup_main_menu(), '–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ', expenses_menu1)
        else:
            wrong_message(message, bot, markup_main_menu(), step1)

    # CATCH COMMANDS FROM CATEGORIES MENU
    def category1(message):
        nonlocal current_category
        categories = get_categories(message, categories_db)
        if message.text == '–ù–∞–∑–∞–¥ üîô':
            send_and_go_next(bot, message, markup_main_menu(), "–í—ã–±–µ—Ä–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –µ—â–µ :)", step1)

        elif message.text == '–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é':
            send_and_go_next(bot, message, markup_back(), '–ö–∞–∫ –±—É–¥–µ—Ç –Ω–∞–∑—ã–≤–∞—Ç—å—Å—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è?', add_category1)

        elif message.text.lower() in [i['title'] for i in categories]:

            for category in categories:
                current_category = category
                if message.text == f'{category["title"]}' and category['allow'] == message.from_user.id:
                    send_and_go_next(bot, message, category_markup(),
                                     f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category["title"].upper()}, –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ', category2)
                    break
                elif message.text == f'{category["title"]}':
                    send_and_go_next(bot, message, markup_back(),
                                     f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category["title"].upper()}', category2)
                    break

        else:
            wrong_message(
                message, bot, categories_markup(message, categories_db, add_button=True), category1
            )

    # CATCH COMMANDS FROM SOLO CATEGORY MENU
    def category2(message):
        nonlocal current_category
        if message.text == '–ù–∞–∑–∞–¥ üîô':
            markup = categories_markup(message, categories_db, add_button=True)
            send_and_go_next(bot, message, markup, "–¢–≤–æ–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", category1)
        elif message.text == '–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é':
            category = current_category
            categories_db.delete_one({'_id': category['_id']})
            send_and_go_next(bot, message, markup_main_menu(), f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è "{category["title"]}" –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞', step1)
        elif message.text == '–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏':
            send_and_go_next(bot, message, markup_back(), '–¢—Ä–µ–±—É–µ—Ç—Å—è –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏',
                             update_category)
        else:
            wrong_message(message, bot, categories_markup(message, categories_db, add_button=True), category2)

    # CATCH TEXT OR BACK FUNCTION FROM ADD CATEGORY MENU
    def add_category1(message):
        if message.text == "–ù–∞–∑–∞–¥ üîô":
            markup = categories_markup(message, categories_db, add_button=True)
            send_and_go_next(bot, message, markup, "–¢–≤–æ–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", category1)
        else:
            try:
                categories_db.insert_one({'title': message.text.lower(), 'allow': message.from_user.id})
                send_and_go_next(bot, message, markup_main_menu(), f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è "{message.text.upper()}" —Å–æ–∑–¥–∞–Ω–∞!',
                                 step1)
            except:
                send_and_go_next(bot, message, markup_back(), f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è "{message.text.upper()}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!',
                                 add_category1)

    # CATCH TEXT OR BACK FUNCTION FROM UPDATE CATEGORY MENU
    def update_category(message):
        nonlocal current_category
        category = current_category
        old_title = category['title']
        if message.text == "–ù–∞–∑–∞–¥ üîô":
            send_and_go_next(bot, message, category_markup(), "–¢–≤–æ–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", category2)
        else:
            categories_db.update_one({'_id': category['_id']}, {"$set": {'title': message.text.lower()}})
            send_and_go_next(
                bot, message, markup_main_menu(), f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è "{old_title}" –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ "{message.text.upper()}"!',
                step1
            )

    # CATCH COMMANDS FROM EXPENSES_MENU
    def expenses_menu1(message):
        nonlocal expenses
        if message.text == "–ù–∞–∑–∞–¥ üîô":
            send_and_go_next(bot, message, markup_main_menu(), "–í—ã–±–µ—Ä–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –µ—â–µ:)", step1)
        elif message.text == '–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥':
            send_and_go_next(bot, message, expense_markup_create(), '–í–≤–µ–¥–∏ —Å—É–º–º—É, –º–æ–∂–Ω–æ –≤–ø–∏—Å–∞—Ç—å –≤—Ä—É—á–Ω—É—é',
                             add_expense1)
        elif message.text == '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ —Ç—Ä–∞—Ç—ã':
            expenses = get_expenses_with_categories(message, expenses_db, categories_db)
            send_and_go_next(bot, message, expense_markup_show(expenses), "–¢–≤–æ–∏ —Ç—Ä–∞—Ç—ã", show_expenses)

    # CATCH COMMANDS FROM EXPENSE MAIN MENU
    def add_expense1(message):
        nonlocal expense
        if message.text == "–ù–∞–∑–∞–¥ üîô":
            send_and_go_next(bot, message, expenses_markup_main_menu(), "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ", expenses_menu1)
        else:
            try:
                markup = categories_markup(message, categories_db, add_button=False)
                expense = expense_constructor(message)
                send_and_go_next(bot, message, markup, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', add_expense2)
            except ValueError:
                send_and_go_next(bot, message, expense_markup_create,
                                 '–¢—Ä–µ–±—É–µ—Ç—Å—è –≤–≤–µ—Å—Ç–∏ —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä–∞–º–∏!', add_expense1)

    # CATCH COMMANDS FROM ADD EXPENSE IN NUMBERS MENU
    def add_expense2(message):
        nonlocal expense
        categories = get_categories(message, categories_db)
        if message.text == '–ù–∞–∑–∞–¥ üîô':
            send_and_go_next(bot, message, expense_markup_create(), "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ", add_expense1)
        else:
            category = [i for i in categories if i['title'] == message.text.lower()]
            if category:
                expense['category'] = bson.ObjectId(category[0]['_id'])
                send_and_go_next(bot, message, expense_markup_comment(), "–ï—Å–ª–∏ –Ω—É–∂–Ω–æ, –Ω–∞–ø–∏—à–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä–∏–π", add_expense3)

    # CATCH COMMANDS FROM ADD EXPENSE IN CATEGORIES MENU
    def add_expense3(message):
        nonlocal expenses
        if message.text == '–ù–∞–∑–∞–¥ üîô':
            markup = categories_markup(message, categories_db, add_button=False)
            send_and_go_next(bot, message, markup, "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ", add_expense2)
        elif message.text == '–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤':
            expense['comment'] = 'empty'
            expenses_db.insert_one(expense)
            send_and_go_next(bot, message, expenses_markup_main_menu(),
                             f"–†–∞—Å—Ö–æ–¥ {expense['amount']}$ "
                             f"{categories_db.find({'_id': expense['category']})[0]['title']} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É!",
                             expenses_menu1)
        else:
            expense['comment'] = message.text
            expenses_db.insert_one(expense)
            send_and_go_next(
                bot, message, expenses_markup_main_menu(),
                f"–†–∞—Å—Ö–æ–¥ {expense['amount']}$ {categories_db.find({'_id': expense['category']})[0]['title']} "
                f"–¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É!",
                expenses_menu1
            )

    # CATCH COMMANDS FROM EXPENSE MENU FOR SHOW EXPENSES
    def show_expenses(message):
        nonlocal expenses
        nonlocal expense
        if message.text == "–ù–∞–∑–∞–¥ üîô":
            send_and_go_next(bot, message, expenses_markup_main_menu(), "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ", expenses_menu1)
        else:
            expense = get_expense_from_string(message, expenses)
            send_and_go_next(bot, message, expense_markup_delete(), "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å—Ö–æ–¥", delete_expense)

    # CATCH COMMANDS FROM SHOW EXPENSES FOR DELETE EXPENSE
    def delete_expense(message):
        nonlocal expense
        if message.text == "–ù–∞–∑–∞–¥ üîô":
            send_and_go_next(bot, message, expense_markup_show(expenses), "–¢–≤–æ–∏ —Ç—Ä–∞—Ç—ã", show_expenses)
        else:
            expense_ID = expense['_id']
            expenses_db.delete_one({'_id': expense_ID})
            send_and_go_next(
                bot, message, expenses_markup_main_menu(),
                f"–†–∞—Å—Ö–æ–¥ <b>{expense['amount']}$, "
                f"{expense['category']}</b> –æ—Ç "
                f"<b>{expense['datetime']}</b> —É–¥–∞–ª–µ–Ω!",
                expenses_menu1
            )

    markup = markup_main_menu()

    # FIRST START, REGISTRATION USER
    bot.send_message(message.chat.id, f'Hello, <b>{message.from_user.first_name} </b>', parse_mode='html')
    user = get_user(message)
    if not [i for i in users_db.find({'id': user['id']})]:
        users_db.insert_one(user)
        printed_mess = f'–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!'
        bot.send_message(message.chat.id, printed_mess, parse_mode='html')
    bot.send_message(message.chat.id, "–¢—ã –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —á—Ç–æ –º–æ–∂–µ—Ç –±–æ—Ç –≤ —Ä–∞–∑–¥–µ–ª–µ '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'", parse_mode='html',
                     reply_markup=markup)
    bot.register_next_step_handler(message, step1)


bot.polling(none_stop=True)
