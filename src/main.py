import telebot
import pymongo
import json
import os

from dotenv import load_dotenv
from telebot import types

from services.services import get_user, get_expense, cancel_button

# ENV
load_dotenv()

# BOT init
bot = telebot.TeleBot(os.getenv('BOT_ID'))
###############################################################
# DB's settings
mongo_username = os.getenv('MONGO_USERNAME')
mongo_pass = os.getenv('MONGO_PASS')
db_client = pymongo.MongoClient(f'mongodb://{mongo_username}:{mongo_pass}@mongo:27017/')
current_db = db_client['tbot_database']

# Create categories
categories_db = current_db['categories']
basic_ctgrs = json.loads(os.getenv('CATEGORIES'))

if not [i for i in categories_db.find()]:
    ins_result = categories_db.insert_many(basic_ctgrs)
    print(ins_result.inserted_ids)

# Create users
users_db = current_db['users']

# Create expenses
expenses_db = current_db['expenses']


###############################################################


# LOGIC
@bot.message_handler(commands=['start'])
def start(message):
    mess = f'Hello, <b>{message.from_user.first_name} </b>'
    bot.send_message(message.chat.id, mess, parse_mode='html')
    bot.send_sticker(message.chat.id, 'CAACAgIAAxkBAAMdYukegN0DKP2EFZROYWiTa4mtytQAAiIAAw9uxy-17_oMMQ834ikE')
    user = get_user(message)
    if not [i for i in users_db.find({'id': user['id']})]:
        ins_result = users_db.insert_one(user)
        print(ins_result.inserted_id)
        printed_mess = f'–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã, –≤–∞—à id {user["id"]}\n'
        bot.send_message(message.chat.id, printed_mess, parse_mode='html')
    bot.send_message(message.chat.id, "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /help, \n—á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —á—Ç–æ —É–º–µ–µ—Ç –±–æ—Ç", parse_mode='html')


# LIST OF CATEGORIES VIEW
@bot.message_handler(commands=['categories'])
def show_categories(message):
    categories = " \n".join([i['title'].upper() for i in categories_db.find(
        {"$or": [{"allow": "any"}, {"allow": f"{message.from_user.id}"}]})]
                            )
    bot.send_message(message.chat.id, categories)
    bot.send_message(
        message.chat.id,
        "–¢—ã –º–æ–∂–µ—à—å —É–∑–Ω–∞—Ç—å —Ç–µ–≥–∏ –ø–æ –∫–æ—Ç–æ—Ä—ã–º –±–æ—Ç –ø–æ–Ω–∏–º–∞–µ—Ç\n–≤ –∫–∞–∫—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –æ—Ç–Ω–µ—Å—Ç–∏ —Ç–æ—Ç –∏–ª–∏ –∏–Ω–æ–π —Ä–∞—Å—Ö–æ–¥\n–ø—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /tags"
    )
    bot.send_message(
        message.chat.id,
        "–¢–∞–∫ –∂–µ —Ç—ã –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, \n–∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /add_category"
    )


# SHOW TAGS
@bot.message_handler(commands=['tags'])
def show_category_tags(message):
    categories = [i for i in categories_db.find({"$or": [{"allow": "any"}, {"allow": f"{message.from_user.id}"}]})]
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    items = [types.KeyboardButton(f'{i["title"]}') for i in categories] + [
        cancel_button()]
    markup.add(*items)

    def step1(message):
        for i in categories:
            markup = types.ReplyKeyboardRemove()
            if message.text == "–æ—Ç–º–µ–Ω–∞ üö´":
                bot.delete_message(message.chat.id, message.message_id)
                bot.delete_message(message.chat.id, message.message_id - 1)
                bot.send_message(message.chat.id, "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=markup)
            elif message.text == f"{i['title']}":
                bot.delete_message(message.chat.id, message.message_id)
                bot.delete_message(message.chat.id, message.message_id - 1)
                bot.send_message(
                    message.chat.id,
                    f"–°–ª–µ–¥—É—é—â–∏–µ —Ç–µ–≥–∏ –æ—Ç–Ω–æ—Å—è—Ç—å—Å—è –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ <b>{i['title']}</b> :\n{', '.join(i['tags'])}",
                    parse_mode='html', reply_markup=markup
                )

    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é ", reply_markup=markup)
    bot.register_next_step_handler(message, step1)


# ADD CATEGORY
@bot.message_handler(commands=['add_category'])
def add_category(message):
    global category
    category = {'title': '', 'tags': '', 'allow': f'{message.from_user.id}'}
    markup = types.InlineKeyboardMarkup()

    def step1(message):
        nonlocal markup
        category['title'] = message.text.lower().strip()
        try:
            bot.send_message(
                message.chat.id,
                f"–ò–º—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {message.text}"
            )
            bot.send_message(
                message.chat.id,
                "–ù–∞–ø–∏—à–∏ —Ç–µ–≥ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –ø–æ –∫–æ—Ç–æ—Ä—ã–º —Ç—ã —Å–º–æ–∂–µ—à—å –¥–æ–±–∞–≤–ª—è—Ç—å –≤ —Å–≤–æ—é –∫–æ—Ç–µ–≥–æ—Ä–∏—é –Ω–æ–≤—ã–µ —Ç—Ä–∞—Ç—ã",
                reply_markup=markup,
            )
            bot.register_next_step_handler(message, step2)
        except:
            bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')

    def step2(message):
        category['tags'] = message.text.split(",") + [category['title']]
        markup = types.InlineKeyboardMarkup()
        item1 = types.InlineKeyboardButton('–î–∞', callback_data='yes')
        item2 = types.InlineKeyboardButton('–ù–µ—Ç', callback_data='no')
        markup.add(item1, item2)
        try:
            bot.send_message(
                message.chat.id,
                f"–¢–µ–≥–∏, –ø–æ –∫–æ—Ç–æ—Ä—ã–º —Ç—ã —Å–º–æ–∂–µ—à—å –¥–æ–±–∞–≤–ª—è—Ç—å —Ä–∞—Å—Ö–æ–¥—ã :\n{', '.join(category['tags'])}"
            )
            bot.send_message(
                message.chat.id,
                f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category['title']},\n—Ç–µ–≥–∏ - {','.join(category['tags'])},\n<b>C–æ—Ö—Ä–∞–Ω–∏—Ç—å —ç—Ç—É –∫–∞—Ç–µ–≥–æ—Ä–∏—é?</b>",
                reply_markup=markup,
                parse_mode='html'
            )
        except:
            bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏ —Ç–µ–≥–∏ –ø—Ä–∏–º–µ—Ä =>\n –∫–æ—Ñ–µ, –∫—Ä—É–∞—Å–∞–Ω, –±—É—Ç–µ—Ä–±—Ä–æ–¥')
            bot.register_next_step_handler(message, step2)

    bot.send_message(
        message.chat.id,
        '–°–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∑–∞—Ç–µ–º —Ç–µ–≥–∏ –ø–æ –∫–æ—Ç–æ—Ä—ã–º –±–æ—Ç –±—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å –≤ –∫–∞–∫—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–æ–±–∞–≤–ª—è—Ç—å –∑–∞–ø–∏—Å—å'
    )
    bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏')
    bot.register_next_step_handler(message, step1)


# ADD EXPENSE
@bot.message_handler(commands=['add_expense'])
def add_expense(message):
    def step1(message):
        expense = get_expense(message)
        try:
            mess = str(expense["amount"]) + ' ' + expense["category"] + ' –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –±–∞–∑—É'
            bot.send_message(message.chat.id, mess)
        except:
            mess = expense['exception']
            bot.send_message(message.chat.id, mess)
            bot.register_next_step_handler(message, step1)

    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ —Ä–∞—Å—Ö–æ–¥")
    bot.register_next_step_handler(message, step1)


# INFO ABOUT PROJECT
@bot.message_handler(commands=['help'])
def list_of_commands(message):
    bot.send_message(
        message.chat.id,
        '–≠—Ç–æ—Ç –±–æ—Ç –º–æ–∂–µ—Ç –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —Ç–≤–æ–∏ —Ä–∞—Å—Ö–æ–¥—ã!\n'
        '–ß—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–π —Ä–∞—Å—Ö–æ–¥ -\n'
        '–Ω–∞–ø–∏—à–∏ –µ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ - \n<b>{<u>—Å—É–º–º–∞ –±–µ–∑ –∑–Ω–∞–∫–æ–≤</u>}{<u>–∫–∞—Ç–µ–≥–æ—Ä–∏—è —Ç—Ä–∞—Ç</u>}</b>\n'
        '–ù–∞–ø—Ä–∏–º–µ—Ä:<b>"2 —Ç–∞–∫—Å–∏"</b>\n'
        '–°–≤–æ–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç—ã –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, –Ω–∞–ø–∏—Å–∞–≤ –∫–æ–º–∞–Ω–¥—É /categories\n'
        '–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç—ã –º–æ–∂–µ—à—å —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /add_category\n',
        parse_mode='html'
    )


@bot.callback_query_handler(func=lambda call: True)
def callback(call):
    global category
    if call.message:
        if call.data == 'yes':
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.id,
                text=f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è <b>{category['title']}</b> —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!",
                parse_mode='html'
            )
            categories_db.insert_one(category)
        elif call.data == 'no':
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.id,
                text=f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è <b>{category['title']}</b> –Ω–µ <u>—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!</u>",
                parse_mode='html'
            )


bot.polling(none_stop=True)
