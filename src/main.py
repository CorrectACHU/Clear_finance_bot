import telebot
import pymongo
import json
import os

from dotenv import load_dotenv
from telebot import types

from services.services import get_user, main_menu, back_markup, go_back, wrong_message
from services.categories import *
from services.expenses import *

# ENV
load_dotenv()

# BOT init
bot = telebot.TeleBot(os.getenv('BOT_ID'))
###############################################################
# DB's settings
mongo_username = os.getenv('MONGO_USERNAME')
mongo_pass = os.getenv('MONGO_PASS')
db_client = pymongo.MongoClient(f'mongodb://{mongo_username}:{mongo_pass}@mongo:27017/')
current_db = db_client['tbot_database']

# Create categories
categories_db = current_db['categories']
basic_categories = json.loads(os.getenv('CATEGORIES'))

if not [i for i in categories_db.find()]:
    ins_result = categories_db.insert_many(basic_categories)
    print(ins_result.inserted_ids)

categories_db.create_index('title', unique=True)

# Create users
users_db = current_db['users']

# Create expenses
expenses_db = current_db['expenses']


###############################################################


# LOGIC
@bot.message_handler(commands=['start'])
def start(message):
    current_category = {}
    expense = {}

    # CATCH COMMANDS FROM MAIN MENU
    def step1(message):
        if message.text == '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è':
            bot.send_message(
                message.chat.id,
                '–≠—Ç–æ—Ç –±–æ—Ç –º–æ–∂–µ—Ç –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å —Ç–≤–æ–∏ —Ä–∞—Å—Ö–æ–¥—ã!\n'
                '–ß—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å —Å–≤–æ–π —Ä–∞—Å—Ö–æ–¥ -\n'
                '–Ω–∞–ø–∏—à–∏ –µ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ - \n<b>{<u>—Å—É–º–º–∞ –±–µ–∑ –∑–Ω–∞–∫–æ–≤</u>}{<u>–∫–∞—Ç–µ–≥–æ—Ä–∏—è —Ç—Ä–∞—Ç</u>}</b>\n'
                '–ù–∞–ø—Ä–∏–º–µ—Ä:<b>"2 —Ç–∞–∫—Å–∏"</b>\n'
                '–î–æ–±–∞–≤–∏—Ç—å, —É–¥–∞–ª–∏—Ç—å –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç—ã –º–æ–∂–µ—à—å —Å –ø–æ–º–æ—â—å—é —Ä–∞–∑–¥–µ–ª–∞ "–ú–æ–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"\n',
                parse_mode='html'
            )
            bot.delete_message(message.chat.id, message.message_id)
            bot.register_next_step_handler(message, step1)
        elif message.text == '–ú–æ–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏':
            markup = categories_markup(message, categories_db, add_button=True)
            bot.send_message(message.chat.id, '–¢–≤–æ–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', reply_markup=markup)
            bot.delete_message(message.chat.id, message.message_id)
            bot.register_next_step_handler(message, category1)
        elif message.text == '–†–∞—Å—Ö–æ–¥—ã':
            markup = expenses_markup_main_menu()
            bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ', reply_markup=markup)
            bot.delete_message(message.chat.id, message.message_id)
            bot.register_next_step_handler(message, expenses_menu1)
        else:
            wrong_message(message, bot, main_menu(), step1)

    # CATCH COMMANDS FROM CATEGORIES MENU
    def category1(message):
        nonlocal current_category
        categories = get_categories(message, categories_db)
        if message.text == '–ù–∞–∑–∞–¥ üîô':
            go_back(message, "–í—ã–±–µ—Ä–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –µ—â–µ :)", markup=main_menu(), bot=bot, next_func=step1)
        elif message.text == '–î–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é':
            markup = back_markup()
            bot.send_message(message.chat.id, '–ö–∞–∫ –±—É–¥–µ—Ç –Ω–∞–∑—ã–≤–∞—Ç—å—Å—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è?', reply_markup=markup)
            bot.delete_message(message.chat.id, message.message_id)
            bot.register_next_step_handler(message, add_category1)
        elif message.text.lower() in [i['title'] for i in categories]:
            for category in categories:
                if message.text == f'{category["title"]}' and category['allow'] == message.from_user.id:
                    current_category = category
                    markup = category_markup()
                    bot.send_message(
                        message.chat.id,
                        f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category["title"].upper()}, –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ',
                        reply_markup=markup
                    )
                    bot.delete_message(message.chat.id, message.message_id)
                    bot.register_next_step_handler(message, category2)
                elif message.text == f'{category["title"]}':
                    markup = back_markup()
                    current_category = category
                    bot.send_message(
                        message.chat.id,
                        f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category["title"].upper()}',
                        reply_markup=markup
                    )
                    bot.delete_message(message.chat.id, message.message_id)
                    bot.register_next_step_handler(message, category2)
        else:
            wrong_message(
                message, bot, categories_markup(message, categories_db, add_button=True), category1
            )

    # CATCH COMMANDS FROM SOLO CATEGORY MENU
    def category2(message):
        nonlocal current_category
        if message.text == '–ù–∞–∑–∞–¥ üîô':
            markup = categories_markup(message, categories_db, add_button=True)
            go_back(message, "–¢–≤–æ–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", bot, markup, category1)
        elif message.text == '–£–¥–∞–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é':
            markup = main_menu()
            category = current_category
            categories_db.delete_one({'_id': category['_id']})
            bot.send_message(message.chat.id, f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è "{category["title"]}" –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞', reply_markup=markup)
            bot.delete_message(message.chat.id, message.message_id)
            bot.register_next_step_handler(message, step1)
        elif message.text == '–ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏':
            markup = back_markup()
            bot.send_message(message.chat.id, '–¢—Ä–µ–±—É–µ—Ç—Å—è –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏', reply_markup=markup)
            bot.delete_message(message.chat.id, message.message_id)
            bot.register_next_step_handler(message, update_category)
        else:
            wrong_message(message, bot, categories_markup(message, categories_db, add_button=True), category1)

    # CATCH TEXT OR BACK FUNCTION FROM ADD CATEGORY MENU
    def add_category1(message):
        if message.text == "–ù–∞–∑–∞–¥ üîô":
            markup = categories_markup(message, categories_db, add_button=True)
            go_back(message, "–¢–≤–æ–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", bot, markup, category1)
        else:
            try:
                markup = main_menu()
                categories_db.insert_one({'title': message.text.lower(), 'allow': message.from_user.id})
                go_back(message, f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è "{message.text.upper()}" —Å–æ–∑–¥–∞–Ω–∞!', bot, markup, step1)
            except:
                markup = back_markup()
                go_back(message, f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è "{message.text.upper()}" —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!', bot, markup, add_category1)

    # CATCH TEXT OR BACK FUNCTION FROM UPDATE CATEGORY MENU
    def update_category(message):
        nonlocal current_category
        category = current_category
        old_title = category['title']
        if message.text == "–ù–∞–∑–∞–¥ üîô":
            markup = category_markup()
            go_back(message, "–¢–≤–æ–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏", bot, markup, category2)
        else:
            markup = main_menu()
            update_res = categories_db.update_one({'_id': category['_id']}, {"$set": {'title': message.text.lower()}})
            go_back(
                message,
                f'–ö–∞—Ç–µ–≥–æ—Ä–∏—è "{old_title}" –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ "{message.text.upper()}, {update_res.upserted_id.__str__()}"!',
                bot,
                markup,
                step1
            )

    # CATCH COMMANDS FROM EXPENSES_MENU
    def expenses_menu1(message):
        markup = expenses_markup_main_menu()
        if message.text == "–ù–∞–∑–∞–¥ üîô":
            markup = main_menu()
            go_back(message, "–í—ã–±–µ—Ä–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –µ—â–µ:)", bot, markup, step1)
        elif message.text == '–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥':
            markup = expense_markup_create()
            bot.send_message(message.chat.id, '–í–≤–µ–¥–∏ —Å—É–º–º—É, –º–æ–∂–Ω–æ –≤–ø–∏—Å–∞—Ç—å –≤—Ä—É—á–Ω—É—é', reply_markup=markup)
            bot.delete_message(message.chat.id, message.message_id)
            bot.register_next_step_handler(message, add_expense1)
        elif message.text == '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –º–æ–∏ —Ç—Ä–∞—Ç—ã':
            bot.send_message(message.chat.id, '–†–ê–ë–û–¢–ê–ï–¢! –¢–û–ñ–ï', reply_markup=markup)
            bot.register_next_step_handler(message, expenses_menu1)

    # CATCH COMMANDS FROM EXPENSE MAIN MENU
    def add_expense1(message):
        nonlocal expense
        if message.text == "–ù–∞–∑–∞–¥ üîô":
            markup = expenses_markup_main_menu()
            go_back(message, "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ", bot, markup, expenses_menu1)
        else:
            try:
                markup = categories_markup(message, categories_db, add_button=False)
                expense = expense_constructor(message)
                bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é', reply_markup=markup)
                bot.register_next_step_handler(message, add_expense2)
            except ValueError:
                markup = expense_markup_create()
                bot.send_message(
                    message.chat.id,
                    '–¢—Ä–µ–±—É–µ—Ç—Å—è –≤–≤–µ—Å—Ç–∏ —Ä–∞—Å—Ö–æ–¥ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä–∞–º–∏!',
                    reply_markup=markup
                )
                bot.delete_message(message.chat.id, message.message_id)
                bot.register_next_step_handler(message, add_expense1)

    # CATCH COMMANDS FROM ADD EXPENSE IN NUMBERS MENU
    def add_expense2(message):
        nonlocal expense
        if message.text == '–ù–∞–∑–∞–¥ üîô':
            markup = expense_markup_create()
            go_back(message, "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ", bot, markup, add_expense1)
        else:
            markup = expense_markup_comment()
            expense['category'] = message.text.lower()
            bot.send_message(message.chat.id, "–ï—Å–ª–∏ –Ω—É–∂–Ω–æ, –Ω–∞–ø–∏—à–∏ –∫–æ–º–µ–Ω—Ç–∞—Ä–∏–π", reply_markup=markup)
            bot.delete_message(message.chat.id, message.message_id)
            bot.register_next_step_handler(message, add_expense3)

    # CATCH COMMANDS FROM ADD EXPENSE IN CATEGORIES MENU
    def add_expense3(message):
        nonlocal expense
        if message.text == '–ù–∞–∑–∞–¥ üîô':
            markup = categories_markup(message, categories_db, add_button=False)
            go_back(message, "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ", bot, markup, add_expense2)
        elif message.text == '–ë–µ–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤':
            markup = expenses_markup_main_menu()
            expense['comment'] = 'empty'
            bot.send_message(message.chat.id, f"–†–∞—Å—Ö–æ–¥ {expense['amount']}$ {expense['category']} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É!",
                             reply_markup=markup)
            bot.delete_message(message.chat.id, message.message_id)
            bot.register_next_step_handler(message, expenses_menu1)
        else:
            markup = expenses_markup_main_menu()
            expense['comment'] = message.text
            bot.send_message(message.chat.id, f"–†–∞—Å—Ö–æ–¥ {expense['amount']}$ {expense['category']} –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É!",
                             reply_markup=markup)
            bot.delete_message(message.chat.id, message.message_id)
            bot.register_next_step_handler(message, expenses_menu1)

    markup = main_menu()

    # FIRST START, REGISTRATION USER
    bot.send_message(message.chat.id, f'Hello, <b>{message.from_user.first_name} </b>', parse_mode='html')
    user = get_user(message)
    if not [i for i in users_db.find({'id': user['id']})]:
        users_db.insert_one(user)
        printed_mess = f'–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!'
        bot.send_message(message.chat.id, printed_mess, parse_mode='html')
    bot.send_message(message.chat.id, "–¢—ã –º–æ–∂–µ—à—å –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —á—Ç–æ –º–æ–∂–µ—Ç –±–æ—Ç –≤ —Ä–∞–∑–¥–µ–ª–µ '–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è'", parse_mode='html',
                     reply_markup=markup)
    bot.register_next_step_handler(message, step1)


bot.polling(none_stop=True)
